package com.example.vpa;

import android.app.AlertDialog;
import android.app.ListActivity;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.database.Cursor;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.AdapterContextMenuInfo;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.SimpleCursorAdapter;
import android.widget.TextView;
import android.widget.Toast;

public class Memo extends ListActivity {
	private static final int ACTIVITY_CREATE = 0;
	private static final int ACTIVITY_EDIT = 1;

	private static final int INSERT_ID = Menu.FIRST;
	private static final int DELETE_ID = Menu.FIRST + 1;
	private static final int LOCK_ID = Menu.FIRST + 2;
	TextView tv;
	private NotesDbAdapter mDbHelper;
	private SharedPreferences prefs;
	private Cursor note;
	private String pin = "";
	private int pinFlag, pinFlag2;
	private long id_listItem, context_id;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.notes_list);
		mDbHelper = new NotesDbAdapter(this);
		mDbHelper.open();
		fillData();
		registerForContextMenu(getListView());
		prefs = PreferenceManager
				.getDefaultSharedPreferences(getApplicationContext());
		pin = prefs.getString("PIN", "0");
		if (pin.equals(""))
			pinFlag = 1;
		else
			pinFlag = 2;
	}

	protected void onPause() {
		super.onPause();
		Editor editPrefs = prefs.edit();
		editPrefs.putString("PIN", pin);
		editPrefs.commit();
	}

	private void fillData() {
		note = mDbHelper.fetchAllNotes();
		startManagingCursor(note);
		String[] from = new String[] { NotesDbAdapter.KEY_TITLE,
				NotesDbAdapter.COL_DATE };
		int[] to = new int[] { R.id.title_text, R.id.date_text };
		SimpleCursorAdapter notes = new SimpleCursorAdapter(this,
				R.layout.notes_row, note, from, to);
		setListAdapter(notes);
	}

	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {
		super.onListItemClick(l, v, position, id);
		id_listItem = id;
		pinFlag2 = 1;
		openNote();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.memo, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		switch (item.getItemId()) {
		case R.id.action_add:
			openNewMemo();
			return true;
		case R.id.clear_all:
			new AlertDialog.Builder(this)
					.setIcon(android.R.drawable.ic_dialog_alert)
					.setTitle(R.string.memo)
					.setMessage("Are you sure to clear all memos?")
					.setPositiveButton("Yes",
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									mDbHelper.deleteAllNotes();
									fillData();
								}

							}).setNegativeButton("No", null).show();
			return true;
		case R.id.pin_code:
			alertDialog(pinFlag);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onCreateContextMenu(ContextMenu menu, View v,
			ContextMenuInfo menuInfo) {
		super.onCreateContextMenu(menu, v, menuInfo);
		AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) menuInfo;
		note = mDbHelper.fetchNote(info.id);
		menu.add(0, DELETE_ID, 0, R.string.menu_clear);
		if (note.getString(note.getColumnIndexOrThrow(NotesDbAdapter.KEY_LOCK))
				.startsWith("1"))
			menu.add(0, LOCK_ID, 0, "Unlock");
		else
			menu.add(0, LOCK_ID, 0, R.string.memo_lock);
	}

	@Override
	public boolean onContextItemSelected(MenuItem item) {
		AdapterContextMenuInfo info = (AdapterContextMenuInfo) item
				.getMenuInfo();
		context_id = info.id;
		note = mDbHelper.fetchNote(info.id);
		startManagingCursor(note);
		switch (item.getItemId()) {
		case DELETE_ID:

			if (note.getString(
					note.getColumnIndexOrThrow(NotesDbAdapter.KEY_LOCK))
					.startsWith("0")) {
				mDbHelper.deleteNote(info.id);
				fillData();
			} else
				Toast.makeText(getApplicationContext(), "Memo is locked",
						Toast.LENGTH_LONG).show();

			return true;
		case LOCK_ID:
			pinFlag2 = 2;
			openNote();
			return true;
		}
		return super.onContextItemSelected(item);
	}

	public void openNewMemo() {
		Intent intent = new Intent(this, NewMemo.class);
		startActivityForResult(intent, 1);
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode,
			Intent intent) {
		super.onActivityResult(requestCode, resultCode, intent);
		fillData();
	}

	public void alertDialog(int pinFlag) {
		AlertDialog.Builder alert = new AlertDialog.Builder(this);
		alert.setTitle(R.string.pin_code);
		final EditText et = new EditText(this);
		final EditText et2 = new EditText(this);
		et.setHint(R.string.enter_current_pin_code);
		et2.setHint(R.string.enter_new_pin_code);
		if (pinFlag == 1)
			alert.setView(et);
		else if (pinFlag == 2) {
			LinearLayout ll = new LinearLayout(this);
			ll.setOrientation(LinearLayout.VERTICAL);
			ll.addView(et);
			ll.addView(et2);
			alert.setView(ll);
		}
		alert.setPositiveButton(R.string.set,
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						if (et.getText().toString().equals(pin)) {
							pin = et2.getText().toString();
							Toast.makeText(getApplicationContext(),
									"PIN changed!", Toast.LENGTH_LONG).show();
						} else
							Toast.makeText(getApplicationContext(),
									"Wrong old PIN", Toast.LENGTH_LONG).show();
					}
				});
		alert.show();

	}

	public void openNote() {
		final Intent i = new Intent(this, NewMemo.class);
		i.putExtra(NotesDbAdapter.KEY_ROWID, id_listItem);
		AlertDialog.Builder alert = new AlertDialog.Builder(this);
		alert.setTitle(R.string.pin_code);
		alert.setMessage(R.string.enter_pin);
		final EditText et = new EditText(this);
		alert.setView(et);
		String s;
		if (pinFlag2 == 1) {
			if (note.getString(
					note.getColumnIndexOrThrow(NotesDbAdapter.KEY_LOCK))
					.equals("0")) {
				startActivityForResult(i, ACTIVITY_EDIT);
				return;
			} else {
				s = "Open";
				note = mDbHelper.fetchNote(id_listItem);
			}
		} else
			s = "Unlock";
		if (pinFlag2 == 2) {
			note = mDbHelper.fetchNote(context_id);
			if (note.getString(
					note.getColumnIndexOrThrow(NotesDbAdapter.KEY_LOCK))
					.equals("0")) {
				mDbHelper
						.updateNote(
								context_id,
								"***Locked***",
								note.getString(note
										.getColumnIndexOrThrow(NotesDbAdapter.KEY_BODY)),
								"1");
				Toast.makeText(getApplicationContext(), "Memo Locked",
						Toast.LENGTH_LONG).show();
				fillData();
				return;
			}
		}
		alert.setPositiveButton(s, new DialogInterface.OnClickListener() {

			@Override
			public void onClick(DialogInterface dialog, int which) {

				String pin2 = et.getText().toString();
				if (pin2.equals(pin)) {
					if (pinFlag2 == 1)
						startActivityForResult(i, ACTIVITY_EDIT);
					else {
						if (note.getString(
								note.getColumnIndexOrThrow(NotesDbAdapter.KEY_LOCK))
								.equals("1")) {
							mDbHelper.updateNote(
									context_id,
									note.getString(note
											.getColumnIndexOrThrow(NotesDbAdapter.KEY_BODY)),
									note.getString(note
											.getColumnIndexOrThrow(NotesDbAdapter.KEY_BODY)),
									"0");
							Toast.makeText(getApplicationContext(),
									"Memo Unlocked", Toast.LENGTH_LONG).show();
							fillData();
						}

					}
				} else
					Toast.makeText(getApplicationContext(), "Wrong PIN code",
							Toast.LENGTH_LONG).show();
			}
		});
		alert.setOnCancelListener(new OnCancelListener() {

			@Override
			public void onCancel(DialogInterface dialog) {
				fillData();
				dialog.dismiss();
			}
		});
		alert.show();
	}
}
